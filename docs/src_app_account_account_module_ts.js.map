{"version":3,"file":"src_app_account_account_module_ts.js","mappings":"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","sources":["./src/app/account/account.module.ts","./src/app/account/components/forgot-password/forgot-password.component.ts","./src/app/account/components/forgot-password/forgot-password.component.html","./src/app/account/components/login/login.component.ts","./src/app/account/components/login/login.component.html","./src/app/account/components/register/register.component.ts","./src/app/account/components/register/register.component.html","./src/app/account/components/reset-password/reset-password.component.ts","./src/app/account/components/reset-password/reset-password.component.html","./node_modules/subsink/dist/es2015/index.js","./node_modules/subsink/dist/es2015/subsink.js"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\r\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\r\nimport { SharedModule } from '../pages/shared/shared.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ForgotPasswordComponent,\r\n    ResetPasswordComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: 'Login', component: LoginComponent,\r\n      },\r\n      {\r\n        path: 'Register', component: RegisterComponent,\r\n      },\r\n      {\r\n        path: 'ForgotPassword', component: ForgotPasswordComponent,\r\n      },\r\n      {\r\n        path: 'ResetPassword', component: ResetPasswordComponent,\r\n      },\r\n      { path: '', redirectTo: 'Login', pathMatch: 'full' },\r\n      { path: '**', redirectTo: 'Login', pathMatch: 'full' },\r\n    ])\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { SubSink } from 'subsink';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'ngx-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss']\r\n})\r\nexport class ForgotPasswordComponent {\r\n  isLoading: boolean = false;\r\n\r\n\r\n  private subs = new SubSink();\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) { }\r\n\r\n  ForgotPasswordForm: FormGroup = this.fb.group(\r\n    {\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n    },\r\n  );\r\n  onSubmit() {\r\n    this.subs.sink = this.userService.forgotPassword(this.ForgotPasswordForm.value).subscribe({\r\n      next: (result) => {\r\n        this.router.navigate(['/account/ResetPassword']);\r\n        localStorage.setItem('email', this.ForgotPasswordForm.value)\r\n        this.toastrService.success(result.message, '', {\r\n          timeOut: 9000,\r\n        });\r\n        this.userService.setEmail(this.ForgotPasswordForm.get('email')?.value)\r\n        this.isLoading = false;\r\n\r\n      },\r\n      error: (err) => {\r\n        this.isLoading = false;\r\n        console.log(err);\r\n        this.toastrService.error('', err, {\r\n          timeOut: 3000,\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container forgotPassword p-md-5 p-2 py-5\">\r\n  <form [formGroup]=\"ForgotPasswordForm\" (ngSubmit)=\"onSubmit()\">\r\n    <label class=\"fw-bold\" for=\"\">Forgot Password </label>\r\n    <input\r\n      formControlName=\"email\"\r\n      [ngClass]=\"{ 'is-valid': ForgotPasswordForm.get('email')?.valid }\"\r\n      type=\"email\"\r\n      class=\"form-control mb-3\"\r\n      style=\"border-radius: 0\"\r\n    />\r\n    <div\r\n      *ngIf=\"\r\n        ForgotPasswordForm.get('email')?.errors &&\r\n        ForgotPasswordForm.get('email')?.dirty\r\n      \"\r\n      class=\"alert alert-danger p-1\"\r\n    >\r\n      <p\r\n        *ngIf=\"ForgotPasswordForm.get('email')?.getError('required')\"\r\n        class=\"m-0\"\r\n      >\r\n        email Is Required\r\n      </p>\r\n      <p *ngIf=\"ForgotPasswordForm.get('email')?.getError('email')\" class=\"m-0\">\r\n        Enter Valid Email\r\n      </p>\r\n    </div>\r\n    <button\r\n      [disabled]=\"this.ForgotPasswordForm.invalid\"\r\n      type=\"submit\"\r\n      class=\"btn btn-primary  w-100\"\r\n      style=\"border-radius: 0\"\r\n    >\r\n      <i *ngIf=\"isLoading\" class=\"fas fa-spinner fa-spin\"></i>\r\n\r\n      <span *ngIf=\"!isLoading\">Reset Password</span>\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { SubSink } from 'subsink';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit , OnDestroy {\r\n  loginForm!: FormGroup;\r\n  isLoading: boolean = false;\r\n\r\n  private subs = new SubSink();\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n\r\n\r\n  onSubmit(): void {\r\n    this.isLoading = true;\r\n    //This function only works when the from is valid\r\n    this.subs.sink = this.userService.login(this.loginForm.value).subscribe({\r\n      next: (result) => {\r\n        this.userService.setToken(result.data.jwToken);\r\n        this.userService.setUserRoles(result.data.roles);\r\n        this.userService.setUserName(result.data.userName);\r\n        this.router.navigate(['/pages']);\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        this.toastrService.error(\"The username or password is incorrect, please try again.\", '', {\r\n          timeOut: 5000,\r\n        });\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n}\r\n","<div class=\"container vh-100\">\r\n  <div class=\"row justify-content-center align-items-center h-100\">\r\n    <div class=\"card login p-0\">\r\n      <div class=\"card-body\">\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"text-center my-4\">\r\n            <h2>Welcome</h2>\r\n          </div>\r\n\r\n          <p\r\n            style=\"color: lightslategray; text-align: center; margin-top: 10px\"\r\n          >\r\n            Please enter your login details\r\n          </p>\r\n\r\n          <div class=\"form-group mb-5 mt-4\">\r\n            <input\r\n              required\r\n              type=\"text\"\r\n              id=\"email\"\r\n              class=\"form-control\"\r\n              formControlName=\"email\"\r\n            />\r\n            <span class=\"myPlaceholder px-2\">email</span>\r\n            <i\r\n              [ngClass]=\"{\r\n                isValid: loginForm.get('email')?.valid,\r\n                isNotValid:\r\n                  !loginForm.get('email')?.valid &&\r\n                  loginForm.get('email')?.touched\r\n              }\"\r\n            >\r\n            </i>\r\n            <span\r\n              class=\"requirements px-2\"\r\n              *ngIf=\"loginForm.get('email')?.errors?.['required']\r\n                             && loginForm.get('email')?.dirty \"\r\n              >Email this required</span\r\n            >\r\n            <span\r\n              class=\"requirements px-2\"\r\n              *ngIf=\"loginForm.get('email')?.errors?.['email']\r\n                             && loginForm.get('email')?.dirty \"\r\n              >is not Email</span\r\n            >\r\n          </div>\r\n\r\n          <div class=\"form-group my-4\">\r\n            <input\r\n              required\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              formControlName=\"password\"\r\n            />\r\n            <span class=\"myPlaceholder px-2\">password</span>\r\n            <i\r\n              [ngClass]=\"{\r\n                isValid: loginForm.get('password')?.valid,\r\n                isNotValid:\r\n                  !loginForm.get('password')?.valid &&\r\n                  loginForm.get('password')?.touched\r\n              }\"\r\n            >\r\n            </i>\r\n            <span\r\n              class=\"requirements px-2\"\r\n              *ngIf=\"loginForm.get('password')?.errors?.['required'] && \r\n                            loginForm.get('password')?.dirty \"\r\n              >Password this required</span\r\n            >\r\n          </div>\r\n\r\n       \r\n\r\n          <button\r\n            [disabled]=\"this.loginForm.invalid\"\r\n            type=\"submit\"\r\n            class=\"btn btn-primary w-100\"\r\n          >\r\n            <i *ngIf=\"isLoading\" class=\"fas fa-spinner fa-spin\"></i>\r\n            <span *ngIf=\"!isLoading\">Login</span>\r\n          </button>\r\n\r\n          <div\r\n            class=\"text-center m-2\"\r\n            data-bs-toggle=\"modal\"\r\n            data-bs-target=\"#ForgotPasswordModal\"\r\n          >\r\n            or<span class=\"link m-1\" [routerLink]=\"['../ForgotPassword']\"\r\n              >Forgot Password</span\r\n            >\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      <div class=\"card-footer text-right\">\r\n        Don't have an account?<span\r\n          class=\"link m-1\"\r\n          [routerLink]=\"['../Register']\"\r\n          >Sign up</span\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div\r\n  class=\"modal fade\"\r\n  id=\"ForgotPasswordModal\"\r\n  tabindex=\"-1\"\r\n  aria-labelledby=\"exampleModalLabel\"\r\n  aria-hidden=\"true\"\r\n>\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-body\">\r\n        <ngx-forgot-password></ngx-forgot-password>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { SubSink } from 'subsink';\r\nimport { IRegister } from '../../models/IRegister';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'ngx-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent implements OnDestroy {\r\n  isLoading: boolean = false;\r\n  private subs = new SubSink();\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) { }\r\n\r\n  registerForm: FormGroup = this.fb.group(\r\n    {\r\n      userName: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(20),\r\n        Validators.pattern(/^[a-zA-Z0-9]*$/),\r\n      ]),\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.pattern(\r\n          /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{6,20}$/\r\n        ),\r\n      ]),\r\n      ConfirmPassword: new FormControl(null, [Validators.required]),\r\n    },\r\n    { validators: this.customPassword }\r\n  );\r\n\r\n  customPassword(registerForm: any) {\r\n    let password = registerForm.get('password');\r\n    let ConfirmPassword = registerForm.get('ConfirmPassword');\r\n    if (password?.value !== ConfirmPassword?.value) {\r\n      ConfirmPassword.setErrors({ math: 'math' });\r\n      return { math: 'math' };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.isLoading = true;\r\n    this.subs.sink = this.userService\r\n      .register(this.registerForm.value)\r\n      .subscribe({\r\n        next: (result) => {\r\n          this.router.navigate(['./account/login']);\r\n          this.toastrService.success(result.message, '', {\r\n            timeOut: 9000,\r\n          });\r\n          this.isLoading = false;\r\n        },\r\n        error: (err) => {\r\n          this.isLoading = false;\r\n          console.log(err);\r\n          this.toastrService.error('', err, {\r\n            timeOut: 3000,\r\n          });\r\n        },\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <section class=\"p-2 pt-2 md-2 p-md-5\">\r\n    <div class=\"card mx-md-5\">\r\n      <div class=\"text-center my-2\">\r\n        <h2>Welcome</h2>\r\n      </div>\r\n\r\n      <p style=\"color: lightslategray; text-align: center; margin-top: 10px\">\r\n        Please enter your register details\r\n      </p>\r\n      <form class=\"m-4\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n        <label class=\"fw-bold\" for=\"\">userName: </label>\r\n        <input\r\n          formControlName=\"userName\"\r\n          [ngClass]=\"{ 'is-valid': registerForm.get('userName')?.valid }\"\r\n          type=\"text\"\r\n          class=\"form-control mb-3\"\r\n        />\r\n        <div\r\n          *ngIf=\"\r\n            registerForm.get('userName')?.errors &&\r\n            registerForm.get('userName')?.dirty\r\n          \"\r\n          class=\"alert alert-danger p-1\"\r\n        >\r\n          <p\r\n            *ngIf=\"registerForm.get('userName')?.getError('required')\"\r\n            class=\"m-0\"\r\n          >\r\n            UserName Is Required\r\n          </p>\r\n          <p\r\n            *ngIf=\"registerForm.get('userName')?.getError('minlength')\"\r\n            class=\"m-0\"\r\n          >\r\n            UserName Is min char 6\r\n          </p>\r\n          <p\r\n            *ngIf=\"registerForm.get('userName')?.getError('maxlength')\"\r\n            class=\"m-0\"\r\n          >\r\n            UserName Is max char 20\r\n          </p>\r\n          <p\r\n            *ngIf=\"registerForm.get('userName')?.getError('pattern')\"\r\n            class=\"m-0\"\r\n          >\r\n            Input must be alphanumeric\r\n          </p>\r\n        </div>\r\n\r\n        <label class=\"fw-bold\" for=\"\">email: </label>\r\n        <input\r\n          formControlName=\"email\"\r\n          [ngClass]=\"{ 'is-valid': registerForm.get('email')?.valid }\"\r\n          type=\"email\"\r\n          class=\"form-control mb-3\"\r\n        />\r\n        <div\r\n          *ngIf=\"\r\n            registerForm.get('email')?.errors &&\r\n            registerForm.get('email')?.dirty\r\n          \"\r\n          class=\"alert alert-danger p-1\"\r\n        >\r\n          <p\r\n            *ngIf=\"registerForm.get('email')?.getError('required')\"\r\n            class=\"m-0\"\r\n          >\r\n            email Is Required\r\n          </p>\r\n          <p *ngIf=\"registerForm.get('email')?.getError('email')\" class=\"m-0\">\r\n            Enter Valid Email\r\n          </p>\r\n        </div>\r\n\r\n        <label class=\"fw-bold\" for=\"\">password: </label>\r\n        <input\r\n          formControlName=\"password\"\r\n          [ngClass]=\"{ 'is-valid': registerForm.get('password')?.valid }\"\r\n          type=\"password\"\r\n          class=\"form-control mb-3\"\r\n        />\r\n        <div\r\n          *ngIf=\"\r\n            registerForm.get('password')?.errors &&\r\n            registerForm.get('password')?.dirty\r\n          \"\r\n          class=\"alert alert-danger p-1\"\r\n        >\r\n          <p\r\n            *ngIf=\"registerForm.get('password')?.getError('required')\"\r\n            class=\"m-0\"\r\n          >\r\n            password Is Required\r\n          </p>\r\n          <p\r\n            *ngIf=\"registerForm.get('password')?.getError('pattern')\"\r\n            class=\"m-0\"\r\n          >\r\n            Password should be 6-10 chars with 1 uppercase, 1 lowercase & 1\r\n            special character\r\n          </p>\r\n        </div>\r\n\r\n        <label class=\"fw-bold\" for=\"\">ConfirmPassword: </label>\r\n        <input\r\n          formControlName=\"ConfirmPassword\"\r\n          [ngClass]=\"{ 'is-valid': registerForm.get('ConfirmPassword')?.valid }\"\r\n          type=\"password\"\r\n          class=\"form-control mb-3\"\r\n        />\r\n        <div\r\n          *ngIf=\"\r\n            registerForm.get('ConfirmPassword')?.errors &&\r\n            registerForm.get('ConfirmPassword')?.dirty\r\n          \"\r\n          class=\"alert alert-danger p-1\"\r\n        >\r\n          <p\r\n            *ngIf=\"registerForm.get('ConfirmPassword')?.getError('required')\"\r\n            class=\"m-0\"\r\n          >\r\n            ConfirmPassword Is Required\r\n          </p>\r\n\r\n          <p\r\n            *ngIf=\"registerForm.get('ConfirmPassword')?.getError('math')\"\r\n            class=\"m-0\"\r\n          >\r\n            password and ConfirmPassword not math\r\n          </p>\r\n        </div>\r\n\r\n        <button\r\n          [disabled]=\"this.registerForm.invalid\"\r\n          type=\"submit\"\r\n          class=\"btn btn-primary w-100\"\r\n        >\r\n          <i *ngIf=\"isLoading\" class=\"fas fa-spinner fa-spin\"></i>\r\n          <span *ngIf=\"!isLoading\">Submit</span>\r\n        </button>\r\n      </form>\r\n      <div class=\"card-footer text-right\">\r\n        Already have an account?\r\n        <span class=\"link m-1\" [routerLink]=\"['../Login']\">Login</span>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { SubSink } from 'subsink';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'ngx-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent {\r\n  isLoading: boolean = false;\r\n  private subs = new SubSink();\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) { }\r\n\r\n  resetPasswordForm: FormGroup = this.fb.group(\r\n    {\r\n      email: new FormControl(this.userService.getEmail()),\r\n      code: new FormControl(null, [Validators.required]),\r\n      password: new FormControl(null, [Validators.required, Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{6,20}$/)]),\r\n      ConfirmPassword: new FormControl(null, [Validators.required]),\r\n    },\r\n    { validators: this.customPassword }\r\n  );\r\n\r\n  customPassword(resetPasswordForm: any) {\r\n    let password = resetPasswordForm.get('password');\r\n    let ConfirmPassword = resetPasswordForm.get('ConfirmPassword');\r\n    if (password?.value !== ConfirmPassword?.value) {\r\n      ConfirmPassword.setErrors({ math: 'math' });\r\n      return { math: 'math' };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.isLoading = true;\r\n    this.subs.sink = this.userService.resetPassword(this.resetPasswordForm.value).subscribe({\r\n      next: (result) => {\r\n        this.subs.sink = this.userService.login({\r\n          email: localStorage.getItem('email')!,\r\n          password: this.resetPasswordForm.get('password')?.value\r\n        }).subscribe({\r\n          next: (result) => {\r\n            this.userService.setToken(result.data.jwToken);\r\n            this.router.navigate(['/pages']);\r\n          },\r\n          error: (err) => {\r\n            this.router.navigate(['/account/Login']);\r\n          },\r\n        });\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        this.isLoading = false;\r\n        console.log(err);\r\n        this.toastrService.error('', err, {\r\n          timeOut: 3000,\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subs.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"p-2 pt-5 p-md-5\">\r\n        <div class=\"card mx-md-5\">\r\n\r\n            <div class=\"text-center my-4\">\r\n                <h2>Welcome</h2>\r\n            </div>\r\n\r\n            <p style=\"color: lightslategray; text-align: center; margin-top: 10px\">\r\n                Please enter your register details\r\n            </p>\r\n            <form class=\"m-4\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n\r\n\r\n\r\n                <label class=\"fw-bold\" for=\"\">code: </label>\r\n                <input formControlName=\"code\" [ngClass]=\"{'is-valid':resetPasswordForm.get('code')?.valid}\" type=\"code\"\r\n                    class=\"form-control mb-3\">\r\n                <div *ngIf=\"resetPasswordForm.get('code')?.errors && resetPasswordForm.get('code')?.dirty\"\r\n                    class=\"alert alert-danger p-1\">\r\n                    <p *ngIf=\"resetPasswordForm.get('code')?.getError('required')\" class=\"m-0\">code Is Required</p>\r\n                </div>\r\n\r\n\r\n                <label class=\"fw-bold\" for=\"\">password: </label>\r\n                <input formControlName=\"password\" [ngClass]=\"{'is-valid':resetPasswordForm.get('password')?.valid}\"\r\n                    type=\"password\" class=\"form-control mb-3\">\r\n                <div *ngIf=\"resetPasswordForm.get('password')?.errors && resetPasswordForm.get('password')?.dirty\"\r\n                    class=\"alert alert-danger p-1\">\r\n                    <p *ngIf=\"resetPasswordForm.get('password')?.getError('required')\" class=\"m-0\">password Is Required\r\n                    </p>\r\n                    <p *ngIf=\"resetPasswordForm.get('password')?.getError('pattern')\" class=\"m-0\">Password should be\r\n                        6-10\r\n                        chars\r\n                        with 1 uppercase, 1 lowercase & 1 special character</p>\r\n                </div>\r\n\r\n\r\n                <label class=\"fw-bold\" for=\"\">ConfirmPassword: </label>\r\n                <input formControlName=\"ConfirmPassword\"\r\n                    [ngClass]=\"{'is-valid':resetPasswordForm.get('ConfirmPassword')?.valid}\" type=\"password\"\r\n                    class=\"form-control mb-3\">\r\n                <div *ngIf=\"resetPasswordForm.get('ConfirmPassword')?.errors && resetPasswordForm.get('ConfirmPassword')?.dirty\"\r\n                    class=\"alert alert-danger p-1\">\r\n                    <p *ngIf=\"resetPasswordForm.get('ConfirmPassword')?.getError('required')\" class=\"m-0\">\r\n                        ConfirmPassword Is\r\n                        Required</p>\r\n                    <p *ngIf=\"resetPasswordForm.get('ConfirmPassword')?.getError('math')\" class=\"m-0\">password and\r\n                        ConfirmPassword not math\r\n                    </p>\r\n                </div>\r\n\r\n                <button [disabled]=\"this.resetPasswordForm.invalid\" type=\"submit\"\r\n                    class=\"btn btn-primary  w-100\">\r\n                    <i *ngIf=\"isLoading\" class=\"fas fa-spinner fa-spin\"></i>\r\n\r\n                    <span *ngIf=\"!isLoading\">Submit</span>\r\n                </button>\r\n\r\n\r\n\r\n            </form>\r\n            <div class=\"card-footer text-right\">\r\n                Already have an account?\r\n                <span class=\"link m-1\" [routerLink]=\"['../Login']\">Login</span>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>","export { SubSink } from \"./subsink\";\n","var isFunction = function (fn) { return typeof fn === 'function'; };\n/**\n * Subscription sink that holds Observable subscriptions\n * until you call unsubscribe on it in ngOnDestroy.\n */\nvar SubSink = /** @class */ (function () {\n    /**\n     * Subscription sink that holds Observable subscriptions\n     * until you call unsubscribe on it in ngOnDestroy.\n     *\n     * @example\n     * In Angular:\n     * ```\n     *   private subs = new SubSink();\n     *   ...\n     *   this.subs.sink = observable$.subscribe(...)\n     *   this.subs.add(observable$.subscribe(...));\n     *   ...\n     *   ngOnDestroy() {\n     *     this.subs.unsubscribe();\n     *   }\n     * ```\n     */\n    function SubSink() {\n        this._subs = [];\n    }\n    /**\n     * Add subscriptions to the tracked subscriptions\n     * @example\n     *  this.subs.add(observable$.subscribe(...));\n     */\n    SubSink.prototype.add = function () {\n        var subscriptions = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            subscriptions[_i] = arguments[_i];\n        }\n        this._subs = this._subs.concat(subscriptions);\n    };\n    Object.defineProperty(SubSink.prototype, \"sink\", {\n        /**\n         * Assign subscription to this sink to add it to the tracked subscriptions\n         * @example\n         *  this.subs.sink = observable$.subscribe(...);\n         */\n        set: function (subscription) {\n            this._subs.push(subscription);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Unsubscribe to all subscriptions in ngOnDestroy()\n     * @example\n     *   ngOnDestroy() {\n     *     this.subs.unsubscribe();\n     *   }\n     */\n    SubSink.prototype.unsubscribe = function () {\n        this._subs.forEach(function (sub) { return sub && isFunction(sub.unsubscribe) && sub.unsubscribe(); });\n        this._subs = [];\n    };\n    return SubSink;\n}());\nexport { SubSink };\n"],"names":["CommonModule","LoginComponent","RouterModule","RegisterComponent","ForgotPasswordComponent","ResetPasswordComponent","SharedModule","AccountModule","forChild","path","component","redirectTo","pathMatch","declarations","imports","FormControl","Validators","SubSink","i0","constructor","userService","router","fb","toastrService","group","email","required","onSubmit","subs","sink","forgotPassword","ForgotPasswordForm","value","subscribe","next","result","navigate","localStorage","setItem","success","message","timeOut","setEmail","get","isLoading","error","err","console","log","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","template","ctx","ngOnInit","loginForm","password","login","setToken","data","jwToken","setUserRoles","roles","setUserName","userName","minLength","maxLength","pattern","ConfirmPassword","validators","customPassword","registerForm","setErrors","math","register","getEmail","code","resetPasswordForm","resetPassword","getItem","isFunction","fn","_subs","prototype","add","subscriptions","_i","arguments","length","concat","Object","defineProperty","set","subscription","push","enumerable","configurable","forEach","sub"],"sourceRoot":"webpack:///","x_google_ignoreList":[9,10]}